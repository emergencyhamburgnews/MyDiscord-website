document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const header = document.querySelector('.site-header');
    const mobileToggle = document.querySelector('.mobile-toggle');
    const navMenu = document.querySelector('.nav-menu');
    const dropdownToggles = document.querySelectorAll('.dropdown-toggle');
    const joinServerBtn = document.getElementById('joinServerBtn');
    const reportForm = document.getElementById('reportForm');
    const unbanForm = document.getElementById('unbanForm');
    
    // Header scroll effect
    window.addEventListener('scroll', function() {
        if (window.scrollY > 20) {
            header?.classList.add('scrolled');
        } else {
            header?.classList.remove('scrolled');
        }
    });
    
    // Mobile menu toggle
    if (mobileToggle && navMenu) {
        mobileToggle.addEventListener('click', function() {
            navMenu.classList.toggle('active');
            
            // Toggle icon
            const icon = mobileToggle.querySelector('i');
            if (icon) {
                icon.classList.toggle('fa-bars');
                icon.classList.toggle('fa-times');
            }
        });
        
        // Close menu when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.nav-menu') && !e.target.closest('.mobile-toggle')) {
                navMenu.classList.remove('active');
                
                // Reset icon
                const icon = mobileToggle.querySelector('i');
                if (icon) {
                    icon.classList.add('fa-bars');
                    icon.classList.remove('fa-times');
                }
            }
        });
    }
    
    // Mobile dropdown toggles
    if (dropdownToggles) {
        dropdownToggles.forEach(toggle => {
            toggle.addEventListener('click', function(e) {
                if (window.innerWidth <= 768) {
                    e.preventDefault();
                    const parent = this.closest('.nav-item');
                    parent.classList.toggle('active');
                    
                    // Toggle dropdown icon
                    const icon = this.querySelector('.dropdown-icon');
                    if (icon) {
                        icon.classList.toggle('fa-chevron-down');
                        icon.classList.toggle('fa-chevron-up');
                    }
                }
            });
        });
    }
    
    // Join Server button
    if (joinServerBtn) {
        joinServerBtn.addEventListener('click', function(e) {
            e.preventDefault();
            // Replace with your actual server link
            window.location.href = 'YOUR_SERVER_JOIN_LINK';
        });
    }
    
    // Roblox username validation function
    function isValidRobloxUsername(username) {
        const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;
        return usernameRegex.test(username);
    }
    
    // Report Player form handling
    if (reportForm) {
        // Create message element if it doesn't exist
        let messageElement = document.getElementById('form-message');
        if (!messageElement) {
            messageElement = document.createElement('div');
            messageElement.id = 'form-message';
            messageElement.style.display = 'none';
            messageElement.className = 'alert';
            reportForm.parentNode.insertBefore(messageElement, reportForm);
        }
        
        reportForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const submitBtn = reportForm.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;

            // Clear previous messages
            messageElement.style.display = 'none';
            messageElement.textContent = '';
            messageElement.className = 'alert'; // Reset class

            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
            submitBtn.disabled = true;
            
            const formData = new FormData(reportForm);
            const username = formData.get('username');
            let violation = formData.get('violation'); // Initial value from dropdown
            const details = formData.get('details');
            const submitMethod = formData.get('submitMethod');
            const otherViolationInput = document.getElementById('otherViolation');

            console.log('[Report Form] Initial violation from dropdown:', violation);
            if (otherViolationInput) {
                console.log('[Report Form] otherViolationInput found. Value:', `"${otherViolationInput.value}"`);
            } else {
                console.warn('[Report Form] otherViolationInput (id="otherViolation") NOT found. Please check your HTML.');
            }

            // If "Other" is selected, use the value from the otherViolation input
            if (violation === 'other') {
                if (otherViolationInput) {
                    let otherText = otherViolationInput.value.trim();
                    if (otherText) { // Only set if there's actual text
                        violation = otherText; // Update JS variable
                        formData.set('violation', violation); // Update FormData for email
                        console.log('[Report Form] "Other" selected. Updated violation to (from otherInput):', `"${violation}"`);
                    } else {
                        // If otherViolationInput is empty, JS 'violation' becomes empty string.
                        // This will be caught by the `if (!violation)` validation check below.
                        violation = ""; // Explicitly set to empty string for the validation check
                        console.log('[Report Form] "Other" selected, but otherViolationInput is empty. JS violation is now "" and will trigger validation.');
                    }
                } else {
                    // otherViolationInput not found. JS 'violation' remains "other".
                    // formData still has "other".
                    // This might be the problematic path if server hangs on receiving literal "other".
                    console.warn('[Report Form] "Other" selected, but otherViolationInput not found. Will attempt to send literal "other" as violation.');
                }
            }
            
            // Form validation
            if (!username || !isValidRobloxUsername(username)) {
                messageElement.textContent = 'Please enter a valid Roblox username (3-20 characters, letters, numbers, and underscores only)';
                messageElement.className = 'alert alert-warning';
                messageElement.style.display = 'flex';
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                console.warn('[Report Form] Validation failed: Invalid username.');
                return;
            }
            
            if (!violation) { // This checks if violation is an empty string, null, or undefined.
                messageElement.innerHTML = '<span class="alert-icon"><i class="fas fa-exclamation-triangle"></i></span> Please select a violation or specify one if you chose "Other".';
                messageElement.className = 'alert alert-warning';
                messageElement.style.display = 'block';
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                console.warn('[Report Form] Validation failed: Violation not specified.');
                return;
            }
            
            if (!details || details.length < 10) {
                messageElement.textContent = 'Please provide more details about the incident';
                messageElement.className = 'alert alert-warning';
                messageElement.style.display = 'flex';
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                console.warn('[Report Form] Validation failed: Details too short.');
                return;
            }
            
            if (!submitMethod) {
                messageElement.textContent = 'Please select how you want to submit this report';
                messageElement.className = 'alert alert-warning';
                messageElement.style.display = 'flex';
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                console.warn('[Report Form] Validation failed: Submit method not selected.');
                return;
            }
            
            console.log('[Report Form] Final violation to be sent:', `"${violation}"`);
            console.log('[Report Form] FormData "violation" field for email:', `"${formData.get('violation')}"`);
            console.log('[Report Form] Submitting via:', submitMethod);

            // Process form submission
            try {
                let success = false;
                
                if (submitMethod === 'discord') {
                    console.log('[Report Form] Sending to Discord webhook...');
                    const webhookUrl = 'https://discordapp.com/api/webhooks/1369248820357234738/u-9-9CtrxtY7xM2UoZVkM-dzLjS_Hi7c6gDO39YD0-_wLjJY4wkYJwkxZN7UQdXpEKdA';
                    const discordMessage = { // Renamed to avoid conflict if 'message' is used elsewhere
                        content: '<@&1369250776903450685>',
                        embeds: [{
                            title: 'New Player Report',
                            color: 0x1E3A8A,
                            fields: [
                                { name: 'Username', value: username, inline: true },
                                { name: 'Violation Type', value: violation, inline: true }, // Uses the potentially updated JS 'violation'
                                { name: 'Details', value: details }
                            ],
                            timestamp: new Date().toISOString()
                        }]
                    };
                    
                    const response = await fetchWithTimeout(webhookUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(discordMessage),
                        timeout: 10000 // 10 seconds
                    });
                    success = response.ok;
                    console.log('[Report Form] Discord response status:', response.status, 'Success:', success);
                } else if (submitMethod === 'email') {
                    console.log('[Report Form] Sending to Formspree (email)...');
                    const response = await fetchWithTimeout('https://formspree.io/f/moveylzy', {
                        method: 'POST',
                        body: formData, // formData contains the updated 'violation' if "Other" was chosen and filled
                        headers: { 'Accept': 'application/json' },
                        timeout: 10000 // 10 seconds
                    });
                    success = response.ok;
                    console.log('[Report Form] Formspree response status:', response.status, 'Success:', success);
                }
                
                if (success) {
                    messageElement.innerHTML = '<div class="alert-icon"><i class="fas fa-check-circle"></i></div><div class="alert-content"><p>Report submitted successfully! Thank you for helping us maintain a fair gaming environment.</p></div>';
                    messageElement.className = 'alert alert-info';
                    messageElement.style.display = 'flex';
                    reportForm.reset();
                    console.log('[Report Form] Submission successful.');
                } else {
                    messageElement.innerHTML = '<div class="alert-icon"><i class="fas fa-exclamation-circle"></i></div><div class="alert-content"><p>There was a problem submitting your report (server indicated an issue). Please try again later.</p></div>';
                    messageElement.className = 'alert alert-warning';
                    messageElement.style.display = 'flex';
                    console.warn('[Report Form] Submission failed (server indicated an issue or non-OK response).');
                }
                
            } catch (error) {
                console.error('[Report Form] Error during submission:', error);
                let errorMsg = 'There was a problem submitting your report. Please try again later.';
                if (error.name === 'AbortError') {
                    errorMsg = 'Submission timed out. Please check your connection or try again later.';
                    console.warn('[Report Form] Submission timed out (AbortError).');
                }
                messageElement.innerHTML = '<div class="alert-icon"><i class="fas fa-exclamation-circle"></i></div><div class="alert-content"><p>' + errorMsg + '</p></div>';
                messageElement.className = 'alert alert-warning';
                messageElement.style.display = 'flex';
            } finally { // Explicit finally block
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                console.log('[Report Form] Submit button reset.');
            }
        });
    }
    
    // Unban Request form handling
    if (unbanForm) {
        // Create message element if it doesn't exist
        let messageElement = document.getElementById('unban-message');
        if (!messageElement) {
            messageElement = document.createElement('div');
            messageElement.id = 'unban-message';
            messageElement.style.display = 'none';
            messageElement.className = 'alert';
            unbanForm.parentNode.insertBefore(messageElement, unbanForm);
        }
        
        unbanForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const submitBtn = unbanForm.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
            submitBtn.disabled = true;
            
            const formData = new FormData(unbanForm);
            const username = formData.get('username');
            const banReason = formData.get('banReason');
            const explanation = formData.get('explanation');
            const submitMethod = formData.get('submitMethod');
            
            // Form validation
            if (!username || !isValidRobloxUsername(username)) {
                messageElement.textContent = 'Please enter a valid Roblox username (3-20 characters, letters, numbers, and underscores only)';
                messageElement.className = 'alert alert-warning';
                messageElement.style.display = 'flex';
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                return;
            }
            
            if (!banReason || banReason.length < 5) {
                messageElement.textContent = 'Please provide the reason for your ban';
                messageElement.className = 'alert alert-warning';
                messageElement.style.display = 'flex';
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                return;
            }
            
            if (!explanation || explanation.length < 20) {
                messageElement.textContent = 'Please provide a detailed explanation for your unban request';
                messageElement.className = 'alert alert-warning';
                messageElement.style.display = 'flex';
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                return;
            }
            
            if (!submitMethod) {
                messageElement.textContent = 'Please select how you want to submit this request';
                messageElement.className = 'alert alert-warning';
                messageElement.style.display = 'flex';
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                return;
            }
            
            // Process form submission
            try {
                let success = false;
                
                if (submitMethod === 'discord') {
                    // Send to Discord webhook
                    const webhookUrl = 'https://discordapp.com/api/webhooks/1369599654328799232/uu8PWgzGU5uaGuIQXJbq2kpVGf9-RY-U79tYhJlh8q048essAv7GdkT9chJPtdANJmD3';
                    const message = {
                        content: '<@&1369250776903450685>',
                        embeds: [{
                            title: 'New Unban Request',
                            color: 0x1E3A8A,
                            fields: [
                                { name: 'Username', value: username, inline: true },
                                { name: 'Ban Reason', value: banReason, inline: true },
                                { name: 'Explanation', value: explanation }
                            ],
                            timestamp: new Date().toISOString()
                        }]
                    };
                    
                    const response = await fetch(webhookUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(message)
                    });
                    
                    success = response.ok;
                    
                } else if (submitMethod === 'email') {
                    // Send via Formspree
                    const response = await fetch('https://formspree.io/f/moveylzy', {
                        method: 'POST',
                        body: formData,
                        headers: { 'Accept': 'application/json' }
                    });
                    
                    success = response.ok;
                }
                
                if (success) {
                    messageElement.innerHTML = '<div class="alert-icon"><i class="fas fa-check-circle"></i></div><div class="alert-content"><p>Unban request submitted successfully! We will review your request and get back to you soon.</p></div>';
                    messageElement.className = 'alert alert-info';
                    messageElement.style.display = 'flex';
                    unbanForm.reset();
                } else {
                    messageElement.innerHTML = '<div class="alert-icon"><i class="fas fa-exclamation-circle"></i></div><div class="alert-content"><p>There was a problem submitting your request. Please try again later.</p></div>';
                    messageElement.className = 'alert alert-warning';
                    messageElement.style.display = 'flex';
                }
                
            } catch (error) {
                console.error('Error submitting form:', error);
                messageElement.innerHTML = '<div class="alert-icon"><i class="fas fa-exclamation-circle"></i></div><div class="alert-content"><p>There was a problem submitting your request. Please try again later.</p></div>';
                messageElement.className = 'alert alert-warning';
                messageElement.style.display = 'flex';
            }
            
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        });
    }
});

// Helper function for fetch with timeout
function fetchWithTimeout(resource, options = {}) {
    const { timeout = 10000 } = options; // 10 seconds default
    const controller = new AbortController();
    const id = setTimeout(() => controller.abort(), timeout);
    return fetch(resource, {
        ...options,
        signal: controller.signal  
    }).finally(() => clearTimeout(id));
}